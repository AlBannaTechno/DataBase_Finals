"الملف الأساسي المسؤل عن التحكم في قاعدة البيانات"
import sqlite3
class LightDB():
    "الفئة المسؤلة عن التحكم في قاعدة البيانات"
    conn=[]
    "متغير للاتصال"
    curr=[]
    "متغير للمؤشر"
    def __init__(self,dbname=-1):
        "المشيد"
        if dbname !=-1:
            "طبعا لشرح هذا الجزأ يمكنك الرجوع الى الملف cDataBase"
            "حيث اننا هنا لم نكمل ياقي الحالات لانها تسبب مشكلة"
            "مع ملاحظة طبعا اننا غيرنا المكتبة من pypyodbc الى sqlite3"
            "وثمة بعض المشاكل في إنشاء قاعدة البيانات"
            "ولاكن تم حلها في مشروع ءاخر وهو AbtDBManager"
            "ولاكن حيث اننا هنا نمتلك قاعدة بيانات ذات جدول ثابت "
            "لا يقبل التغيير لأن أي تغيير في تركيبة الجدول المسمى BOOKS"
            "سيتسبب في عدم عمل هذا المشروع بالكامل"
            "ولهذا فقد أرحنا أنفسنا من هذا الأمر وأنشئنا قاعدة بيانات صافية تسمى metadatabase.abt"
            "هذه القاعدة في كل مرة يريد المستخدم إنشاء قاعدة جديدة يتم "
            "عمل نسخة له من هذه القاعدى"
            self.conn = sqlite3.connect(dbname)
            "الإتصال بقاعدة البيانات"
            self.curr = self.conn.cursor()
            "إنشاء المؤشر الذي سيتحكم في قاعدة البيانات"
    def connect(self,dbname):
        """
                الغرض من هذه الدالة هو السماح للمستخدم بالاتصال بقاعدة البيانات
        حتى بعد إنشاء الكائن من هذه الفئة
        أي أنه ليس بحاجة لمعرفة قاعدة البيانات وقت إنشاء الكائن
        بل ويستطيع تغييرها في أي وقت وهذه الطبيعة الديناميكية أو المرنة
        هي ما نحتتاجه بالتحديد
        """
        "الجزأ التالي مشروح مسبقا"
        self.conn = sqlite3.connect(dbname)
        self.curr = self.conn.cursor()

    def query_performe(self,query):
        """
        دالة إرسال طلب بدون قيم الى قاعدة البيانات مثل حذف جدول أو ربط عدة جداول
        أو ماشابه ذلك فلا ننسى ان هذا الملف ليس لهذا المشروع خصيصا ولاكنه مخصص لأي مشروع
        سيتعامل مع قواعد البيانات
        """
        self.curr.execute(query)
        "تنفيذ الطلب"
        self.conn.commit()
        "الموافقة على التغييرات"
    def query_send_val(self,query,val):
        """
        دالة إرسال طلب محمل بقيم
         وغالبا ما يكون على الصورة
         query_m=query values(?,?,?,....) : INSERT INTO BOOKS VALUES (?,?,?,?)
         values_m=(val1,val2,....)
         curr.execute(query_m,values_m)

         """
        self.curr.execute(query,val)
        self.conn.commit()
    def query_get(self,query):
        "إرسال الطلب مع الحصول على قيم"
        self.curr.execute(query)
        self.conn.commit()

        "إرجاع القيم من الطلب"
        return self.curr.fetchall()

    def query_send_many_val(self,query,vals):
        "هذه الدالة مسؤلة عن إرسال أكثر من طلب كل طلب مع قيمه على شكل قائمة [q1,q2,..]"
        "[vals1,vals2,...]"
        self.curr.executemany(query,vals)
        self.conn.commit()
    def finish(self):
        "هذه الدالة لا يتم استدعائها إلا عند إنتهاء العمل لفصل الاتصال بقاعدة البيانات"
        "كما نلاحظ فقد قمنا بفصل المؤشر أولا ومن ثم قطعنا الاتصال بقاعدة البيانات"
        self.curr.close()
        self.conn.close()


